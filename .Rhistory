EZ[i,j] <- exp(-0.5*(x[i]-u[j])^2)/sum(exp(-0.5*(x[i]-u)^2))
}
}
u <- colSum(EZ*x)/colSum(EZ)
x1 <- rnorm(20, mean = 1, sd = 1)
x2 <- rnorm(20, mean = 3, sd = 1)
x <- c(x1, x2)
u <- c(2,4)
EZ <- matrix(nrow = 40, ncol = 2)
for (i in 1:40){
for (j in 1:2){
EZ[i,j] <- exp(-0.5*(x[i]-u[j])^2)/sum(exp(-0.5*(x[i]-u)^2))
}
}
u <- colSums(EZ*x)/colSum(EZ)
x1 <- rnorm(20, mean = 1, sd = 1)
x2 <- rnorm(20, mean = 3, sd = 1)
x <- c(x1, x2)
u <- c(2,4)
EZ <- matrix(nrow = 40, ncol = 2)
for (i in 1:40){
for (j in 1:2){
EZ[i,j] <- exp(-0.5*(x[i]-u[j])^2)/sum(exp(-0.5*(x[i]-u)^2))
}
}
u <- colSums(EZ*x)/colSum(EZ)
x1 <- rnorm(20, mean = 1, sd = 1)
x2 <- rnorm(20, mean = 3, sd = 1)
x <- c(x1, x2)
u <- c(2,4)
EZ <- matrix(nrow = 40, ncol = 2)
for (i in 1:40){
for (j in 1:2){
EZ[i,j] <- exp(-0.5*(x[i]-u[j])^2)/sum(exp(-0.5*(x[i]-u)^2))
}
}
u <- colSums(EZ*x)/colSums(EZ)
u
x1 <- rnorm(20, mean = 1, sd = 1)
x2 <- rnorm(20, mean = 3, sd = 1)
x <- c(x1, x2)
u <- c(2,4)
EZ <- matrix(nrow = 40, ncol = 2)
for (t in 1:10){
for (i in 1:40){
for (j in 1:2){
EZ[i,j] <- exp(-0.5*(x[i]-u[j])^2)/sum(exp(-0.5*(x[i]-u)^2))
}
}
u <- colSums(EZ*x)/colSums(EZ)
}
u
x1 <- rnorm(20, mean = 1, sd = 1)
x2 <- rnorm(20, mean = 3, sd = 1)
x <- c(x1, x2)
u <- c(2,4)
EZ <- matrix(nrow = 40, ncol = 2)
for (t in 1:20){
for (i in 1:40){
for (j in 1:2){
EZ[i,j] <- exp(-0.5*(x[i]-u[j])^2)/sum(exp(-0.5*(x[i]-u)^2))
}
}
u <- colSums(EZ*x)/colSums(EZ)
}
u
mean(x1)
mean(x2)
x1 <- rnorm(20, mean = 1, sd = 1)
x2 <- rnorm(20, mean = 3, sd = 1)
x <- c(x1, x2)
u <- c(4,5)
EZ <- matrix(nrow = 40, ncol = 2)
for (t in 1:20){
for (i in 1:40){
for (j in 1:2){
EZ[i,j] <- exp(-0.5*(x[i]-u[j])^2)/sum(exp(-0.5*(x[i]-u)^2))
}
}
u <- colSums(EZ*x)/colSums(EZ)
}
u
mean(x1)
mean(x2)
View(EZ)
source("getHexunFinacaData.r")
source("getHexunFinaceData.r")
test <- getHexunFinaceData(600028,2001,2002,"b")
install.packages("stringr")
library("stringr", lib.loc="C:/Users/Z-Q/Documents/R/win-library/2.15")
test <- getHexunFinaceData(600028,2001,2002,"b")
source("getHexunFinaceData.r")
source("getHexunFinaceData.r")
source("getHexunFinaceData.r")
q()
source("getHexunFinaceData.r")
test <- getHexunFinaceData(600028,2001,2002,"b")
View(test)
test
5:1
binomialTre <- function(K,T,S,r,N,u,d){
#预先计算一些常量
dt <- T/N
p <- (exp(r*dt)-d)/(u-d)
disc <- exp(-r*dt)
#初始化assert价格
st[0] <- S*d^N
for (j in 1:N){ st[j] <- st[j-1]*u/d}
#初始化option的价值
for (j in 0:N){ C[j] <- max(0,st[j]-K)}
#通过Tree来回溯计算
for (i in N-1:0){
for (j in 0:i){
C[j] <- disc*(p*c[j+1]+(1-p)*C[j])
}
}
}
binomialTre <- function(K,T,S,r,N,u,d){
#预先计算一些常量
dt <- T/N
p <- (exp(r*dt)-d)/(u-d)
disc <- exp(-r*dt)
#初始化assert价格
st <- matrix(nrow = N+1, ncol = N+1)
C <- matrix(nrow = N+1, ncol = N+1)
for (j in 1:N+1){
st[j,1] <- s*d^(j-1)
for (i in 2:j){
st[j,i+1] <- st[j,i]*u/d
}
}
#初始化option的价值
for (j in 1:N+1){ C[j,5] <- max(0,st[j,5]-K)}
#通过Tree来回溯计算
for (i in N:1){
for (j in 1:i){
C[j,i] <- disc*(p*c[j+1,i+1]+(1-p)*C[j,i+1])
}
}
}
binomiaTree(100,1,100,0.06,3,1.1,0.9091)
binomialTree(100,1,100,0.06,3,1.1,0.9091)
binomialTre(100,1,100,0.06,3,1.1,0.9091)
binomialTre <- function(K,T,S,r,N,u,d){
#预先计算一些常量
dt <- T/N
p <- (exp(r*dt)-d)/(u-d)
disc <- exp(-r*dt)
#初始化assert价格
st <- matrix(nrow = N+1, ncol = N+1)
C <- matrix(nrow = N+1, ncol = N+1)
for (j in 1:N+1){
st[j,1] <- S*d^(j-1)
for (i in 2:j){
st[j,i+1] <- st[j,i]*u/d
}
}
#初始化option的价值
for (j in 1:N+1){ C[j,5] <- max(0,st[j,5]-K)}
#通过Tree来回溯计算
for (i in N:1){
for (j in 1:i){
C[j,i] <- disc*(p*c[j+1,i+1]+(1-p)*C[j,i+1])
}
}
}
binomialTre <- function(K,T,S,r,N,u,d){
#预先计算一些常量
dt <- T/N
p <- (exp(r*dt)-d)/(u-d)
disc <- exp(-r*dt)
#初始化assert价格
st <- matrix(nrow = N+1, ncol = N+1)
C <- matrix(nrow = N+1, ncol = N+1)
for (j in 1:N+1){
st[j,1] <- S*d^(j-1)
for (i in 2:j){
st[j,i+1] <- st[j,i]*u/d
}
}
#初始化option的价值
for (j in 1:N+1){ C[j,5] <- max(0,st[j,5]-K)}
#通过Tree来回溯计算
for (i in N:1){
for (j in 1:i){
C[j,i] <- disc*(p*c[j+1,i+1]+(1-p)*C[j,i+1])
}
}
}
binomialTre(100,1,100,0.06,3,1.1,0.9091)
source("binomialTree.r")
source("binomialTree.r")
source("binomialTree.r")
source("binomialTree.r")
binomialTree <- function(K,T,S,r,N,u,d){
#预先计算一些常量
dt <- T/N
p <- (exp(r*dt)-d)/(u-d)
disc <- exp(-r*dt)
#初始化assert价格
st <- matrix(nrow = N+1, ncol = N+1)
C <- matrix(nrow = N+1, ncol = N+1)
#  for (j in 2:N+1){
#    for (i in j:N+1){
#     st[1,i] <- S*d^(j-1)
#      st[j,i+1] <- st[j,i]*u/d
#    }
#  }
for (i in 1:N+1){
st[1,i] <- S*d^(i-1)
for (j in 1:i){
st[j+1,i] <- st[j,i]*u/d
}
}
#初始化option的价值
for (j in 1:N+1){ C[j,5] <- max(0,st[j,5]-K)}
#通过Tree来回溯计算
for (i in N:1){
for (j in 1:i){
C[j,i] <- disc*(p*c[j+1,i+1]+(1-p)*C[j,i+1])
}
}
}
binomialTree(100,1,100,0.06,3,1.1,0.9091)
binomialTree <- function(K,T,S,r,N,u,d){
#预先计算一些常量
dt <- T/N
p <- (exp(r*dt)-d)/(u-d)
disc <- exp(-r*dt)
#初始化assert价格
st <- matrix(nrow = N+1, ncol = N+1)
C <- matrix(nrow = N+1, ncol = N+1)
#  for (j in 2:N+1){
#    for (i in j:N+1){
#     st[1,i] <- S*d^(j-1)
#      st[j,i+1] <- st[j,i]*u/d
#    }
#  }
for (i in 1:N+1){
st[1,i] <- S*d^(i-1)
for (j in 2:i){
st[j,i] <- st[j-1,i]*u/d
}
}
#初始化option的价值
for (j in 1:N+1){ C[j,5] <- max(0,st[j,5]-K)}
#通过Tree来回溯计算
for (i in N:1){
for (j in 1:i){
C[j,i] <- disc*(p*c[j+1,i+1]+(1-p)*C[j,i+1])
}
}
}
binomialTree(100,1,100,0.06,3,1.1,0.9091)
K<-100;T<-1;S<-100;r<-0.06;N<-3;u<-1.1;d<-0.9091
dt <- T/N
p <- (exp(r*dt)-d)/(u-d)
disc <- exp(-r*dt)
#初始化assert价格
st <- matrix(nrow = N+1, ncol = N+1)
C <- matrix(nrow = N+1, ncol = N+1)
for (i in 1:N+1){
st[1,i] <- S*d^(i-1)
for (j in 2:i){
st[j,i] <- st[j-1,i]*u/d
}
}
View(st)
View(st)
st[1,1]
for (j in 1:N+1){ C[j,5] <- max(0,st[j,5]-K)}
for (j in 1:N+1){ C[j,N+1] <- max(0,st[j,N+1]-K)}
for (i in N:1){
for (j in 1:i){
C[j,i] <- disc*(p*c[j+1,i+1]+(1-p)*C[j,i+1])
}
}
}
for (i in N:1){
for (j in 1:i){
C[j,i] <- disc*(p*C[j+1,i+1]+(1-p)*C[j,i+1])
}
}
}
for (i in N:1){
for (j in 1:i){
C[j,i] <- disc*(p*C[j+1,i+1]+(1-p)*C[j,i+1])
}
}
View(C)
binomialTree <- function(K,T,S,r,N,u,d){
#预先计算一些常量
dt <- T/N
p <- (exp(r*dt)-d)/(u-d)
disc <- exp(-r*dt)
#初始化assert价格
st <- matrix(nrow = N+1, ncol = N+1)
C <- matrix(nrow = N+1, ncol = N+1)
#  for (j in 2:N+1){
#    for (i in j:N+1){
#     st[1,i] <- S*d^(j-1)
#      st[j,i+1] <- st[j,i]*u/d
#    }
#  }
for (i in 1:N+1){
st[1,i] <- S*d^(i-1)
for (j in 2:i){
st[j,i] <- st[j-1,i]*u/d
}
}
#初始化option的价值
for (j in 1:N+1){ C[j,N+1] <- max(0,st[j,N+1]-K)}
#通过Tree来回溯计算
for (i in N:1){
for (j in 1:i){
C[j,i] <- disc*(p*C[j+1,i+1]+(1-p)*C[j,i+1])
}
}
}
binomialTree(100,1,100,0.06,3,1.1,0.9091)
fix(binomialTree)
C
st
binomialTree <- function(K,T,S,r,N,u,d){
#预先计算一些常量
dt <- T/N
p <- (exp(r*dt)-d)/(u-d)
disc <- exp(-r*dt)
#初始化assert价格
st <- matrix(nrow = N+1, ncol = N+1)
C <- matrix(nrow = N+1, ncol = N+1)
#  for (j in 2:N+1){
#    for (i in j:N+1){
#     st[1,i] <- S*d^(j-1)
#      st[j,i+1] <- st[j,i]*u/d
#    }
#  }
for (i in 1:N+1){
st[1,i] <- S*d^(i-1)
for (j in 2:i){
st[j,i] <- st[j-1,i]*u/d
}
}
#初始化option的价值
for (j in 1:N+1){ C[j,N+1] <- max(0,st[j,N+1]-K)}
#通过Tree来回溯计算
for (i in N:1){
for (j in 1:i){
C[j,i] <- disc*(p*C[j+1,i+1]+(1-p)*C[j,i+1])
}
}
C
}
binomialTree(100,1,100,0.06,3,1.1,0.9091)
K<-100;T<-1;S<-100;r<-0.06;N<-3;u<-1.1;d<-0.9091
dt <- T/N
p <- (exp(r*dt)-d)/(u-d)
disc <- exp(-r*dt)
#初始化assert价格
st <- matrix(nrow = N+1, ncol = N+1)
C <- matrix(nrow = N+1, ncol = N+1)
for (i in 1:N+1){
st[1,i] <- S*d^(i-1)
for (j in 2:i){
st[j,i] <- st[j-1,i]*u/d
}
}
for (j in 1:N+1){ C[j,N+1] <- max(0,st[j,N+1]-K)}
View(C)
C[1,1] <- max(0,st[1,4]-K)
c[1,1]
C[1,1]
View(C)
View(C)
View(C)
C[1,4] <- max(0,st[1,4]-K)
View(C)
1:4
for (i in 1:5){x[i]<-i}
x<-c(ncol=5)
c
x
x<-matrix(nrow=1,ncol=5)
for (i in 1:5){x[i]<-i}
x
for (i in 0:5){x[i]<-i}
x
0:5
for (i in 0:N+1){
st[1,i] <- S*d^(i-1)
for (j in 2:i){
st[j,i] <- st[j-1,i]*u/d
}
}
for (i in 1:N+1){
st[1,i] <- S*d^(i-1)
for (j in 2:i){
st[j,i] <- st[j-1,i]*u/d
}
}
View(st)
View(C)
K<-100;T<-1;S<-100;r<-0.06;N<-3;u<-1.1;d<-0.9091
dt <- T/N
p <- (exp(r*dt)-d)/(u-d)
disc <- exp(-r*dt)
#初始化assert价格
st <- matrix(nrow = N+1, ncol = N+1)
C <- matrix(nrow = N+1, ncol = N+1)
for (i in 1:N+1){
st[1,i] <- S*d^(i-1)
for (j in 2:i){
st[j,i] <- st[j-1,i]*u/d
}
}
View(st)
for (i in 1:N+1){
st[1,i] <- S*d^(i-1)
for (j in 2:i){
st[j,i] <- st[j-1,i]*u/d
}
}
View(st)
x <- c(1:N+1)
st[1,] <- S*d^x
View(st)
for (j in 1:N+1){ C[j,N+1] <- max(0,st[j,N+1]-K)}
#通过Tree来回溯计算
for (i in N:1){
for (j in 1:i){
C[j,i] <- disc*(p*C[j+1,i+1]+(1-p)*C[j,i+1])
}
}
View(C)
st[1,1] <- S
for (i in 2:N+1){
st[1,i] <- S*d^(i-1)
for (j in 2:i){
st[j,i] <- st[j-1,i]*u/d
}
}
View(st)
for (j in 1:N+1){ C[j,N+1] <- max(0,st[j,N+1]-K)}
#通过Tree来回溯计算
for (i in N:1){
for (j in 1:i){
C[j,i] <- disc*(p*C[j+1,i+1]+(1-p)*C[j,i+1])
}
}
View(C)
binomialTree <- function(K,T,S,r,N,u,d){
#预先计算一些常量
dt <- T/N
p <- (exp(r*dt)-d)/(u-d)
disc <- exp(-r*dt)
#初始化assert价格
st <- matrix(nrow = N+1, ncol = N+1)
C <- matrix(nrow = N+1, ncol = N+1)
#  for (j in 2:N+1){
#    for (i in j:N+1){
#     st[1,i] <- S*d^(j-1)
#      st[j,i+1] <- st[j,i]*u/d
#    }
#  }
st[1,1] <- S
for (i in 2:(N+1)){
st[1,i] <- S*d^(i-1)
for (j in 2:i){
st[j,i] <- st[j-1,i]*u/d
}
}
#初始化option的价值
for (j in 1:(N+1)){ C[j,N+1] <- max(0,st[j,N+1]-K)}
#通过Tree来回溯计算
for (i in N:1){
for (j in 1:i){
C[j,i] <- disc*(p*C[j+1,i+1]+(1-p)*C[j,i+1])
}
}
C
}
binomialTree(100,1,100,0.06,3,1.1,0.9091)
source("binomialTree")
source("binomialTree.r")
source("binomialTree.r")
source("binomialTree.r")
source("binomialTree.r")
getwd()
library(shiny)
runapp("~/price")
runApp("~/price")
runApp("~/price")
runApp("~/price")
runApp("~/price")
runApp("~/price")
runApp("~/price")
runApp("D:/price")
runApp("~/price")
runApp("~/price")
runApp("D:/price")
runApp("~/price")
runApp("D:/price")
library(tseries)
GSPC <- as.xts(get.hist.quote("^gspc",start="2000-01-01",quote=c("Open","High","Low","Close","Volume","Adjclose")))
install.packages("xts")
library(xts)
library(zoo)
library(xts)
GSPC <- as.xts(get.hist.quote("^gspc",start="2000-01-01",quote=c("Open","High","Low","Close","Volume","Adjclose")))
head(GSPC)
library(shiny)
runApp("shinyApp")
